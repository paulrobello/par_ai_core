name: Build and Test 🐍 distribution 📦

on:
  workflow_dispatch:
  push:
    branches:
      - main
    tags:
      - 'v*.*.*'

jobs:
  build:
    name: Build distribution 📦
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.11", "3.12", "3.13"]
        os: [ubuntu-latest, macos-latest]
        arch: [x64, arm64]
        exclude:
          # Ubuntu ARM64 not needed for now
          - os: ubuntu-latest
            arch: arm64
          # Reduce macOS x64 combinations to save resources
          - os: macos-latest
            arch: x64
            python-version: "3.10"
          - os: macos-latest
            arch: x64
            python-version: "3.11"

    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          architecture: ${{ matrix.arch }}
      - name: Install uv
        uses: astral-sh/setup-uv@v4
      - name: Install dependencies
        run: |
          uv sync --frozen
        timeout-minutes: 10
      - name: Static Typecheck
        run: |
          make typecheck
        timeout-minutes: 15
        continue-on-error: false
      - name: Lint
        run: |
          make lint
        timeout-minutes: 10
        continue-on-error: false
      - name: Test
        run: |
          make coverage
        timeout-minutes: 30
        continue-on-error: false
      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-${{ matrix.os }}-${{ matrix.python-version }}-${{ matrix.arch }}.xml
          path: coverage.xml
      - name: Upload codecov.yml
        uses: actions/upload-artifact@v4
        with:
          name: codecov-${{ matrix.os }}-${{ matrix.python-version }}-${{ matrix.arch }}.yml
          path: codecov.yml
      - name: Package
        run: make package-all
        timeout-minutes: 15
        continue-on-error: false
      - name: Cache build artifacts
        uses: actions/cache@v4
        with:
          path: dist
          key: dist-${{ runner.os }}-${{ matrix.python-version }}-${{ matrix.arch }}-${{ hashFiles('**/pyproject.toml', 'src/**/*.py') }}-${{ github.sha }}
          restore-keys: |
            dist-${{ runner.os }}-${{ matrix.python-version }}-${{ matrix.arch }}-${{ hashFiles('**/pyproject.toml', 'src/**/*.py') }}-
            dist-${{ runner.os }}-${{ matrix.python-version }}-${{ matrix.arch }}-
      - name: Store the distribution packages
        uses: actions/upload-artifact@v4
        with:
          name: python-package-distributions-${{ matrix.os }}-${{ matrix.python-version }}-${{ matrix.arch }}
          path: dist/
          retention-days: 30
          compression-level: 6

  upload-coverage:
    name: Upload Coverage to Codecov
    needs: build
    runs-on: ubuntu-latest
    if: always() && contains(needs.build.result, 'success')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all coverage artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: coverage-report-*
          merge-multiple: true
          path: ./coverage-reports

      - name: Download codecov config
        uses: actions/download-artifact@v4
        with:
          pattern: codecov-*
          merge-multiple: true
          path: ./codecov-configs

      - name: List downloaded files
        run: |
          echo "Coverage reports:"
          ls -la ./coverage-reports/ || echo "No coverage reports found"
          echo "Codecov configs:"
          ls -la ./codecov-configs/ || echo "No codecov configs found"

      - name: Validate coverage files exist
        run: |
          if [ ! -d "./coverage-reports" ] || [ -z "$(ls -A ./coverage-reports)" ]; then
            echo "Warning: No coverage reports found"
            echo "SKIP_CODECOV=true" >> $GITHUB_ENV
          else
            echo "Coverage reports found, proceeding with upload"
            echo "SKIP_CODECOV=false" >> $GITHUB_ENV
          fi

      - name: Upload coverage to Codecov
        if: env.SKIP_CODECOV == 'false'
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          slug: paulrobello/par_ai_core
          fail_ci_if_error: false
          directory: ./coverage-reports
          flags: unittests
          name: codecov-umbrella
          verbose: true
        timeout-minutes: 10
        continue-on-error: true

  tag-version:
    name: Tag Version
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Grant write access to the repository
    needs:
      - build # Wait for all build jobs to complete
      - upload-coverage
    if: ${{ !startsWith(github.ref, 'refs/tags/v') }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Install uv
        uses: astral-sh/setup-uv@v4
      - name: Configure Git
        run: |
          git config --global user.name "${{ github.actor }}"
          git config --global user.email "${{ github.event.pusher.email }}"
      - name: Get version from __init__.py
        id: get_version
        run: |
          version=$(uv run python -c "from src.par_ai_core import __version__; print(__version__)")
          echo "Raw version output: $version"
          echo "VERSION=$version" >> $GITHUB_ENV
      - name: Check version
        id: check_version
        run: |
          echo "Version in env: ${{ env.VERSION }}"
          if [ -z "${{ env.VERSION }}" ]; then
            echo "Error: VERSION is empty"
            exit 1
          fi
      - name: Fetch all tags
        run: git fetch --tags
      - name: Check if tag exists
        id: check_tag
        run: |
          TAG_EXISTS=$(git tag --list "v${{ env.VERSION }}")
          if [ -z "$TAG_EXISTS" ]; then
            echo "TAG_EXISTS=false" >> $GITHUB_ENV
          else
            echo "TAG_EXISTS=true" >> $GITHUB_ENV
          fi
      - name: Delete existing tag locally and remotely
        if: env.TAG_EXISTS == 'true'
        env:
          VERSION: ${{ env.VERSION }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git tag -d "v$VERSION"
          git push --delete origin "v$VERSION"
      - name: Create new tag
        env:
          VERSION: ${{ env.VERSION }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if ! git tag -a "v$VERSION" -m "Version $VERSION"; then
            echo "Failed to create tag"
            exit 1
          fi
          if ! git push origin "v$VERSION"; then
            echo "Failed to push tag"
            exit 1
          fi

  trigger-test-pypi:
    name: Trigger TestPyPI Publish
    runs-on: ubuntu-latest
    permissions:
      actions: write  # Required for workflow dispatch
    needs:
      - build
      - upload-coverage
      - tag-version
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Trigger TestPyPI workflow
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'publish-dev.yml',
              ref: 'main'
            })
